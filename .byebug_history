c
@accounts
c
Session.statuses[:force_logged_out]
Session.statuses
Session.status
Session.where(user_id: user.id, status: 'active').first.status
Session.where(user_id: user.id, status: 'active').first
status
ap Session.where(user_id: user.id)
Session.where(user_id: user.id).update_all(status: 2)
ap Session.where(user_id: user.id)
Session.where(user_id: user.id).update_all(status: 'force_logged_out')
Session.where(user_id: user.id, status: 'active').update_all(status: 'force_logged_out')
ap Session.where(user_id: user.id)
ap Session.where(user_id: user.id, status: 'active')
Session.where(user_id: user.id, status: 'active').update_all(status: :force_logged_out)
ap Session.where(user_id: user.id, status: 'active')
Session.where(user_id: user.id, status: 'active').update_all(status: 'force_logged_out')
Session.where(user_id: user.id, status: 'active')
user
c
actual_session
n
session[:sid]
n
c
session[:session_id]
   12:       @current_user = nil  #not logged_in
n
c
session[:session_id]
n
c
Session.find_by(session_id: session[:session_id])
Session.last
session[:session_id]
session[:session_id])
actual_session
n
c
n
nn
actual_sesission
actual_sesiion
n
ap Session.all
session
ap Session.all
Session.find_by(session_id: session[:session_id]) if session[:session_id]
n
c
ap Session.all
Session.find_by(session_id: session[:session_id]) if session[:session_id]
n
session
params
c
Session.find_by(session_id: session[:session_id]) if session[:session_id]
n
session
params
c
ap Session.all
Session.find_by(session_id: session[:session_id]) 
Session.find_by(session_id: session[:session_id]) if session[:session_id]
sSession.find_by(session_id: session[:session_id]) if session[:session_id]
n
session
n
logged_in?
c
n
session[:session_id]
n
session
n
params
c
params
c
params
c
n
@from
n
params
c
params
q
y
q
c
from
c
to
from
c
to
from
to
from
c
@from
params
c
ap self.transactions.where("amount > ? AND created_at BETWEEN ? AND ?", 0 , from, to).sum(:amount)
ap self.transactions.where("amount > ? AND created_at BETWEEN ? AND ?", 0 , from, to)
self.transactions.where("amount > ? AND created_at BETWEEN ? AND ?", 0 , from, to)
to
from
c
sum(1,2)
User.sum(id)
ap User.all
User.all
User.sum(id)
self.transactions.where("amount > ? AND created_at BETWEEN ? AND ?", 0 , from, to).map()
self.transactions.where("amount > ? AND created_at BETWEEN ? AND ?", 0 , from, to)
self.transactions.where("amount > ? AND created_at BETWEEN ? AND ?", 0 , from, to).sum(:amount)
to
from
self.transactions.where("amount > ? AND created_at BETWEEN ? AND ?", 0 , from, to).sum(:amount)
Time.now
to
from
c
self.transactions.where("amount > ? AND created_at BETWEEN ? AND ?", 0 , from, to).sum(:amount).to_s
self.transactions.where("amount > ? AND created_at BETWEEN ? AND ?", 0 , from, to).sum(:amount)
c
to
from
c
params[:to]
params
c
params
c
params
c
params
c
params
c
params
c
params[:id]
params
c
user
@user
c
nc
n
user
c
q
c
n
c
uc
n
params
c
params.require(:user).permit(:name, :password)
params
n
c
user_params
params
c
n
c
user
n
c
params
c
user
user.authenticate(params[:user][:password_digest])
n
params
pas
c
n
c
params
paras
user.authenticate(params[:user][:password])
user
n
c
n
user
n
User.find_by(name: params[:user][:name])
params[:user][:name]
params
parans
c
user
n
c
params[:user][:name]
user
n
c
params[:password]
params[:user]
params.user
params
user
n
c
n
c
self.transactions
self
c
@account
account_params
c
n
c
@category.errors
@category.save(category_params)
category_params
params
parasm
@category
n
c
n
c
n
user
n
c
transaction_params
User.find(params[:user_id])
params
c
n
c
n
 @transaction = Transaction.new
c
mail(to: @user.name, subject: 'Critical value')
n
@user
n
c
n
params.require(:category).permit(:name)
params
c
